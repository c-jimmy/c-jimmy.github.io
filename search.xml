<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[输入URL后，按下回车键都发生了什么]]></title>
      <url>/2018/03/20/%E8%BE%93%E5%85%A5URL%E5%90%8E%EF%BC%8C%E6%8C%89%E4%B8%8B%E5%9B%9E%E8%BD%A6%E9%94%AE%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h2 id="输入URL后，按下回车键都发生了什么"><a href="#输入URL后，按下回车键都发生了什么" class="headerlink" title="输入URL后，按下回车键都发生了什么"></a>输入URL后，按下回车键都发生了什么</h2><ul>
<li><h4 id="从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）"><a href="#从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）" class="headerlink" title="从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）"></a>从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</h4><a id="more"></a>
<ul>
<li><h5 id="多进程的浏览器"><a href="#多进程的浏览器" class="headerlink" title="多进程的浏览器"></a>多进程的浏览器</h5><ul>
<li>浏览器是多进程的，有一个主控进程，以及每一个tab页面都会新开一个进程（某些情况下多个tab会合并进程）</li>
<li>进程可能包括主控进程，插件进程，GPU，tab页（浏览器内核）等等。<ul>
<li>Browser进程：浏览器的主进程（负责协调、主控），只有一个</li>
<li>第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建</li>
<li>GPU进程：最多一个，用于3D绘制</li>
<li>浏览器渲染进程（内核）：默认每个Tab页面一个进程，互不影响，控制页面渲染，脚本执行，事件处理等（有时候会优化，如多个空白tab会合并成一个进程）</li>
</ul>
</li>
</ul>
</li>
<li><h5 id="多线程的浏览器内核"><a href="#多线程的浏览器内核" class="headerlink" title="多线程的浏览器内核"></a>多线程的浏览器内核</h5><ul>
<li>GUI线程</li>
<li>JS引擎线程</li>
<li>事件触发线程</li>
<li>定时器线程</li>
<li>网络请求线程</li>
</ul>
</li>
<li><h5 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h5><ul>
<li>URL 的组成（协议头， 域名， 端口， 目录路径， 查询参数， hash 值）</li>
<li>网络请求都是单独的线程</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="开启网络线程到发出一个完整的http请求（这一部分涉及到dns查询，tcp-ip请求，五层因特网协议栈等知识）"><a href="#开启网络线程到发出一个完整的http请求（这一部分涉及到dns查询，tcp-ip请求，五层因特网协议栈等知识）" class="headerlink" title="开启网络线程到发出一个完整的http请求（这一部分涉及到dns查询，tcp/ip请求，五层因特网协议栈等知识）"></a>开启网络线程到发出一个完整的http请求（这一部分涉及到dns查询，tcp/ip请求，五层因特网协议栈等知识）</h4><ul>
<li><h5 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a>DNS 查询</h5><ul>
<li>如果浏览器有缓存，直接使用浏览器缓存，否则使用本机缓存，再没有的话就是用host</li>
<li>如果本地没有，就向dns域名服务器查询（本地域名服务器，根域名服务器，COM 顶级域名服务器， Google 域名服务器）</li>
</ul>
</li>
<li><h5 id="TCP-IP-请求"><a href="#TCP-IP-请求" class="headerlink" title="TCP/IP 请求"></a>TCP/IP 请求</h5><ul>
<li>请求三次握手，关闭四次挥手</li>
<li>tcp/ip的并发限制：浏览器对同一域名下并发的tcp连接是有限制的（2-10个不等）。</li>
<li>get和post的区别：<ul>
<li>get和post虽然本质都是tcp/ip，get会产生一个tcp数据包，post两个。</li>
<li>get请求时，浏览器会把 headers和 data一起发送出去，服务器响应200（返回数据）</li>
<li>post请求时，浏览器先发送 headers，服务器响应 100continue，浏览器再发送 data，服务器响应200（返回数据）。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）"><a href="#从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）" class="headerlink" title="从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）"></a>从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</h4><ul>
<li><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5></li>
<li><h5 id="后台的处理"><a href="#后台的处理" class="headerlink" title="后台的处理"></a>后台的处理</h5><ul>
<li>一般有的后端是有统一的验证的，如安全拦截，跨域验证</li>
<li>如果这一步不符合规则，就直接返回了相应的http报文（如拒绝请求等）</li>
<li>然后当验证通过后，才会进入实际的后台代码，此时是程序接收到请求，然后执行（譬如查询数据库，大量计算等等）</li>
<li>等程序执行完毕后，就会返回一个http响应包（一般这一步也会经过多层封装）</li>
<li>然后就是将这个包从后端发送到前端，完成交互</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="后台和前台的http交互（这一部分包括http头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）"><a href="#后台和前台的http交互（这一部分包括http头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）" class="headerlink" title="后台和前台的http交互（这一部分包括http头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）"></a>后台和前台的http交互（这一部分包括http头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）</h4><ul>
<li><h5 id="http报文结构"><a href="#http报文结构" class="headerlink" title="http报文结构"></a>http报文结构</h5><ul>
<li><p>通用头部</p>
<ul>
<li>Request Url: 请求的web服务器地址</li>
<li>Request Method: 请求方式（Get、POST、OPTIONS、PUT、HEAD、DELETE、CONNECT、TRACE）</li>
<li>Status Code: 请求的返回状态码，如200代表成功</li>
<li><p>Remote Address: 请求的远程服务器地址（会转为IP）</p>
</li>
<li><p>通用状态码</p>
<ul>
<li>200——表明该请求被成功地完成，所请求的资源发送回客户端</li>
<li>304——自从上次请求后，请求的网页未修改过，请客户端使用本地缓存</li>
<li>400——客户端请求有错（譬如可以是安全模块拦截）</li>
<li>401——请求未经授权</li>
<li>403——禁止访问（譬如可以是未登录时禁止）</li>
<li>404——资源未找到</li>
<li>500——服务器内部错误</li>
<li>503——服务不可用</li>
</ul>
</li>
<li>范围状态码<ul>
<li>1xx——指示信息，表示请求已接收，继续处理</li>
<li>2xx——成功，表示请求已被成功接收、理解、接受</li>
<li>3xx——重定向，要完成请求必须进行更进一步的操作</li>
<li>4xx——客户端错误，请求有语法错误或请求无法实现</li>
<li>5xx——服务器端错误，服务器未能实现合法的请求</li>
</ul>
</li>
</ul>
</li>
<li>请求响应头部<ul>
<li>请求头<ul>
<li>Accept: 接收类型，表示浏览器支持的MIME类型（对标服务端返回的Content-Type）</li>
<li>Accept-Encoding：浏览器支持的压缩类型,如gzip等,超出类型不能接收</li>
<li>Content-Type：客户端发送出去实体内容的类型</li>
<li>Cache-Control: 指定请求和响应遵循的缓存机制，如no-cache</li>
<li>If-Modified-Since：对应服务端的Last-Modified，用来匹配看文件是否变动，只能精确到1s之内，http1.0中</li>
<li>Expires：缓存控制，在这个时间内不会请求，直接使用缓存，http1.0，而且是服务端时间</li>
<li>Max-age：代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存，http1.1中</li>
<li>If-None-Match：对应服务端的ETag，用来匹配文件内容是否改变（非常精确），http1.1中</li>
<li>Cookie：有cookie并且同域访问时会自动带上</li>
<li>Connection：当浏览器与服务器通信时对于长连接如何进行处理,如keep-alive</li>
<li>Host：请求的服务器URL</li>
<li>Origin：最初的请求是从哪里发起的（只会精确到端口）,Origin比Referer更尊重隐私</li>
<li>Referer：该页面的来源URL(适用于所有类型的请求，会精确到详细页面地址，csrf拦截常用到这个字段)</li>
<li>User-Agent：用户客户端的一些必要信息，如UA头部等</li>
</ul>
</li>
<li>响应头<ul>
<li>Access-Control-Allow-Headers: 服务器端允许的请求Headers</li>
<li>Access-Control-Allow-Methods: 服务器端允许的请求方法</li>
<li>Access-Control-Allow-Origin: 服务器端允许的请求Origin头部（譬如为*）</li>
<li>Content-Type：服务端返回的实体内容的类型</li>
<li>Date：数据从服务器发送的时间</li>
<li>Cache-Control：告诉浏览器或其他客户，什么环境可以安全的缓存文档</li>
<li>Last-Modified：请求资源的最后修改时间</li>
<li>Expires：应该在什么时候认为文档已经过期,从而不再缓存它</li>
<li>Max-age：客户端的本地资源应该缓存多少秒，开启了Cache-Control后有效</li>
<li>ETag：请求变量的实体标签的当前值</li>
<li>Set-Cookie：设置和页面关联的cookie，服务器通过这个头部把cookie传给客户端</li>
<li>Keep-Alive：如果客户端有keep-alive，服务端也会有响应（如timeout=38）</li>
<li>Server：服务器的一些相关信息</li>
</ul>
</li>
<li>其他<ul>
<li>请求头部的 Accept要和响应头部的 Content-Type匹配，否则会报错。</li>
<li>跨域请求时，请求头部的 Origin要匹配响应头部的 Access-Control-Allow-Origin，否则会报跨域错误。</li>
<li>在使用缓存时，请求头部的 If-Modified-Since、 If-None-Match分别和响应头部的 Last-Modified、 ETag对应。</li>
</ul>
</li>
</ul>
</li>
<li>Cookie 以及优化<ul>
<li>场景<ul>
<li>在登陆页面，用户登陆了</li>
<li>此时，服务端会生成一个session，session中有对于用户的信息（如用户名、密码等）</li>
<li>然后会有一个sessionid（相当于是服务端的这个session对应的key）</li>
<li>然后服务端在登录页面中写入cookie，值就是:jsessionid=xxx</li>
<li>然后浏览器本地就有这个cookie了，以后访问同域名下的页面时，自动带上cookie，自动检验，在有效时间内无需二次登陆。</li>
</ul>
</li>
</ul>
</li>
<li>gzip压缩<ul>
<li>gzip是一种压缩格式，需要浏览器支持才有效（不过一般现在浏览器都支持），gzip一般是由 apache、 tomcat等web服务器开启。</li>
</ul>
</li>
<li>长连接与短连接<ul>
<li>长连接：一个tcp/ip连接上可以连续发送多个数据包，在tcp连接保持期间，如果没有数据包发送，需要双方发检测包以维持此连接，一般需要自己做在线维持（类似于心跳包）</li>
<li>短连接：通信双方有数据交互时，就建立一个tcp连接，数据发送完成后，则断开此tcp连接</li>
</ul>
</li>
<li>http 2.0<ul>
<li>不同点<ul>
<li>http1.1中，每请求一个资源，都是需要开启一个tcp/ip连接的，所以对应的结果是，每一个资源对应一个tcp/ip请求，由于tcp/ip本身有并发数限制，所以当资源一多，速度就显著慢下来</li>
<li>http2.0中，一个tcp/ip请求可以请求多个资源，也就是说，只要一次tcp/ip请求，就可以请求若干个资源，分割成更小的帧请求，速度明显提升。</li>
</ul>
</li>
<li>特性<ul>
<li>多路复用（即一个tcp/ip连接可以请求多个资源）</li>
<li>首部压缩（http头部压缩，减少体积）</li>
<li>二进制分帧（在应用层跟传送层之间增加了一个二进制分帧层，改进传输性能，实现低延迟和高吞吐量）</li>
<li>服务器端推送（服务端可以对客户端的一个请求发出多个响应，可以主动通知客户端）</li>
<li>请求优先级（如果流被赋予了优先级，它就会基于这个优先级来处理，由服务器决定需要多少资源来处理该请求。）</li>
</ul>
</li>
</ul>
</li>
<li>https</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="单独拎出来的缓存问题，http的缓存（这部分包括http缓存头部，etag，catch-control等）"><a href="#单独拎出来的缓存问题，http的缓存（这部分包括http缓存头部，etag，catch-control等）" class="headerlink" title="单独拎出来的缓存问题，http的缓存（这部分包括http缓存头部，etag，catch-control等）"></a>单独拎出来的缓存问题，http的缓存（这部分包括http缓存头部，etag，catch-control等）</h4><ul>
<li><h5 id="强缓存与弱缓存"><a href="#强缓存与弱缓存" class="headerlink" title="强缓存与弱缓存"></a>强缓存与弱缓存</h5><ul>
<li>强缓存（ 200fromcache）时，浏览器如果判断本地缓存未过期，就直接使用，无需发起http请求</li>
<li>协商缓存（ 304）时，浏览器会向服务端发起http请求，然后服务端告诉浏览器文件未改变，让浏览器使用本地缓存</li>
</ul>
</li>
<li><h5 id="缓存头部简述"><a href="#缓存头部简述" class="headerlink" title="缓存头部简述"></a>缓存头部简述</h5>  <!--- 属于强缓存控制的：-->
  <!--```-->
  <!--（http1.1）Cache-Control/Max-Age-->
  <!--（http1.0）Pragma/Expires-->
  <!--```-->
  <!--- 属于协商缓存控制的：-->
  <!--```-->
  <!--（http1.1）If-None-Match/E-tag-->
  <!--（http1.0）If-Modified-Since/Last-Modified-->
  <!--```--></li>
<li><h5 id="http1-0中的缓存控制："><a href="#http1-0中的缓存控制：" class="headerlink" title="http1.0中的缓存控制："></a>http1.0中的缓存控制：</h5><ul>
<li>Pragma：严格来说，它不属于专门的缓存控制头部，但是它设置 no-cache时可以让本地强缓存失效（属于编译控制，来实现特定的指令，主要是因为兼容http1.0，所以以前又被大量应用）</li>
<li>Expires：服务端配置的，属于强缓存，用来控制在规定的时间之前，浏览器不会发出请求，而是直接使用本地缓存，注意，Expires一般对应服务器端时间，如 Expires：Fri,30Oct199814:19:41</li>
<li>If-Modified-Since/Last-Modified：这两个是成对出现的，属于协商缓存的内容，其中浏览器的头部是 If-Modified-Since，而服务端的是 Last-Modified，它的作用是，在发起请求时，如果 If-Modified-Since和 Last-Modified匹配，那么代表服务器资源并未改变，因此服务端不会返回资源实体，而是只返回头部，通知浏览器可以使用本地缓存。 Last-Modified，顾名思义，指的是文件最后的修改时间，而且只能精确到 1s以内</li>
</ul>
</li>
<li><h5 id="http1-1中的缓存控制："><a href="#http1-1中的缓存控制：" class="headerlink" title="http1.1中的缓存控制："></a>http1.1中的缓存控制：</h5><ul>
<li>Cache-Control：缓存控制头部，有no-cache、max-age等多种取值</li>
<li>Max-Age：服务端配置的，用来控制强缓存，在规定的时间之内，浏览器无需发出请求，直接使用本地缓存，注意，Max-Age是Cache-Control头部的值，不是独立的头部，譬如 Cache-Control:max-age=3600，而且它值得是绝对时间，由浏览器自己计算</li>
<li>If-None-Match/E-tag：这两个是成对出现的，属于协商缓存的内容，其中浏览器的头部是 If-None-Match，而服务端的是 E-tag，同样，发出请求后，如果 If-None-Match和 E-tag匹配，则代表内容未变，通知浏览器使用本地缓存，和Last-Modified不同，E-tag更精确，它是类似于指纹一样的东西，基于 FileEtagINodeMtimeSize生成，也就是说，只要文件变，指纹就会变，而且没有1s精确度的限制。</li>
</ul>
</li>
<li><h5 id="Max-Age相比Expires？"><a href="#Max-Age相比Expires？" class="headerlink" title="Max-Age相比Expires？"></a>Max-Age相比Expires？</h5><ul>
<li>Expires使用的是服务器端的时间，但是有时候会有这样一种情况-客户端时间和服务端不同步。那这样，可能就会出问题了，造成了浏览器本地的缓存无用或者一直无法过期，所以一般http1.1后不推荐使用 Expires。而 Max-Age使用的是客户端本地时间的计算，因此不会有这个问题，因此推荐使用 Max-Age。</li>
</ul>
</li>
<li><h5 id="E-tag相比Last-Modified？"><a href="#E-tag相比Last-Modified？" class="headerlink" title="E-tag相比Last-Modified？"></a>E-tag相比Last-Modified？</h5><ul>
<li>Last-Modified：<ul>
<li>表明服务端的文件最后何时改变的</li>
<li>它有一个缺陷就是只能精确到1s，</li>
<li>然后还有一个问题就是有的服务端的文件会周期性的改变，导致缓存失效</li>
</ul>
</li>
<li>E-tag:<ul>
<li>是一种指纹机制，代表文件相关指纹</li>
<li>只有文件变才会变，也只要文件变就会变，</li>
<li>也没有精确时间的限制，只要文件一遍，立马E-tag就不一样了</li>
</ul>
</li>
<li>如果同时带有 E-tag和 Last-Modified，服务端会优先检查 E-tag。<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/180320/GbDAi21j80.png?imageslim" alt="mark"></li>
</ul>
</li>
</ul>
</li>
<li><h4 id="浏览器接收到http数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和domcontentloaded等）"><a href="#浏览器接收到http数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和domcontentloaded等）" class="headerlink" title="浏览器接收到http数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和domcontentloaded等）"></a>浏览器接收到http数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和domcontentloaded等）</h4><ul>
<li><h5 id="流程简述-浏览器内核拿到内容后，渲染步骤大致可以分为以下几步："><a href="#流程简述-浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：" class="headerlink" title="流程简述(浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：)"></a>流程简述(浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：)</h5><ul>
<li>解析HTML，构建DOM树</li>
<li>解析CSS，生成CSS规则树</li>
<li>合并DOM树和CSS规则，生成render树</li>
<li>布局render树（Layout/reflow），负责各元素尺寸、位置的计算</li>
<li>绘制render树（paint），绘制页面像素信息</li>
<li>浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/180320/e7hhbfE583.png?imageslim" alt="mark"></li>
</ul>
</li>
<li><h5 id="HTML解析，构建DOM"><a href="#HTML解析，构建DOM" class="headerlink" title="HTML解析，构建DOM"></a>HTML解析，构建DOM</h5><ul>
<li>Conversion转换：浏览器将获得的HTML内容（Bytes）基于他的编码转换为单个字符</li>
<li>Tokenizing分词：浏览器按照HTML规范标准将这些字符转换为不同的标记token。每个token都有自己独特的含义以及规则集</li>
<li>Lexing词法分析：分词的结果是得到一堆的token，此时把他们转换为对象，这些对象分别定义他们的属性和规则</li>
<li>DOM构建：因为HTML标记定义的就是不同标签之间的关系，这个关系就像是一个树形结构一样。例如：body对象的父节点就是HTML对象，然后段略p对象的父节点就是body对象<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/180320/3dIFKCgi2I.png?imageslim" alt="mark"></li>
</ul>
</li>
<li><h5 id="生成CSS规则"><a href="#生成CSS规则" class="headerlink" title="生成CSS规则()"></a>生成CSS规则()</h5>  <img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/180320/cD3kdb62LD.png?imageslim" alt="mark"></li>
<li><h5 id="构建渲染树"><a href="#构建渲染树" class="headerlink" title="构建渲染树"></a>构建渲染树</h5>  <img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/180320/3Di73eE0iH.png?imageslim" alt="mark"></li>
<li><h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><ul>
<li>步骤<ul>
<li>计算CSS样式</li>
<li>构建渲染树</li>
<li>布局，主要定位坐标和大小，是否换行，各种position overflow z-index属性</li>
<li>绘制，将图像绘制出来<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/180320/gIKG4bcH15.png?imageslim" alt="mark"></li>
</ul>
</li>
<li>Layout和Repaint 的区别<ul>
<li>Layout，也称为Reflow，即回流。一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树</li>
<li>Repaint，即重绘。意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就可以了</li>
</ul>
</li>
<li>什么会引起回流？<ul>
<li>页面渲染初始化</li>
<li>DOM结构改变，比如删除了某个节点</li>
<li>render树变化，比如减少了padding</li>
<li>窗口resize</li>
<li>最复杂的一种：获取某些属性，引发回流</li>
</ul>
</li>
<li>优化方案<ul>
<li>减少逐项更改样式，最好一次性更改style，或者将样式定义为class并一次性更新</li>
<li>避免循环操作dom，创建一个documentFragment或div，在它上面应用所有DOM操作，最后再把它添加到window.document</li>
<li>避免多次读取offset等属性。无法避免则将它们缓存到变量</li>
<li>将复杂的元素绝对定位或固定定位，使得它脱离文档流，否则回流代价会很高</li>
</ul>
</li>
<li>当遇到上述的外链时<ul>
<li>会单独开启一个下载线程去下载资源（http1.1中是每一个资源的下载都要开启一个http请求，对应一个tcp/ip链接）。</li>
</ul>
</li>
<li>遇到CSS样式资源<ul>
<li>CSS下载时异步，不会阻塞浏览器构建DOM树</li>
<li>但是会阻塞渲染，也就是在构建render时，会等到css下载解析完毕后才进行（这点与浏览器优化有关，防止css规则不断改变，避免了重复的构建）</li>
<li>media query声明的CSS是不会阻塞渲染的</li>
</ul>
</li>
<li>遇到JS脚本资源<ul>
<li>阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析HTML浏览器的优化，一般现代浏览器有优化，在脚本阻塞时，也会继续下载其它资源（当然有并发上限）但是虽然脚本可以并行下载，解析过程仍然是阻塞的，也就是说必须这个脚本执行完毕后才会接下来的解析，并行下载只是一种优化而已</li>
<li>defer与async，普通的脚本是会阻塞浏览器解析的，但是可以加上defer或async属性，这样脚本就变成异步了，可以等到解析完毕后再执行</li>
</ul>
</li>
<li>遇到img图片类资源<ul>
<li>直接就是异步下载，不会阻塞解析，下载完毕后直接用图片替换原有src的地方。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><h5 id="CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）"><a href="#CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）" class="headerlink" title="CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）"></a>CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）</h5><ul>
<li>知识点<ul>
<li>CSS中规定每一个元素都有自己的盒子模型（相当于规定了这个元素如何显示）</li>
<li>然后可视化格式模型则是把这些盒子按照规则摆放到页面上，也就是如何布局</li>
<li>换句话说，盒子模型规定了怎么在页面里摆放盒子，盒子的相互作用等等</li>
</ul>
</li>
<li>关键字<ul>
<li>包含块（Containing Block）<ul>
<li>根元素是最顶端的元素，它没有父节点，它的包含块就是初始包含块</li>
<li>static和relative的包含块由它最近的块级、单元格或者行内块祖先元素的内容框（content）创建</li>
<li>fixed的包含块是当前可视窗口</li>
<li>absolute的包含块由它最近的position 属性为 absolute、 relative或者 fixed的祖先元素创建</li>
</ul>
</li>
<li>控制框（Controlling Box）<ul>
<li>block，元素生成一个块框</li>
<li>inline，元素产生一个或多个的行内框</li>
<li>inline-block，元素产生一个行内级块框，行内块框的内部会被当作块块来格式化，而此元素本身会被当作行内级框来格式化</li>
<li>none，不生成框，不再格式化结构中，当然了，另一个 visibility:hidden则会产生一个不可见的框</li>
</ul>
</li>
<li>BFC（Block Formatting Context）<ul>
<li>FC即格式上下文，它定义框内部的元素渲染规则，比较抽象</li>
<li></li>
</ul>
</li>
<li>IFC（Inline Formatting Context）</li>
<li>定位体系</li>
<li>浮动</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）"><a href="#JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）" class="headerlink" title="JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）"></a>JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</h4></li>
<li><h4 id="其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）"><a href="#其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）" class="headerlink" title="其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）"></a>其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）</h4></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端体系 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端体系 </tag>
            
            <tag> URL 加载 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery-源码分析（三）：jQuery.fn.init()源码逐行详解]]></title>
      <url>/2017/12/07/jQuery-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AjQuery-fn-init-%E6%BA%90%E7%A0%81%E9%80%90%E8%A1%8C%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文为原创文章，转载请署名并填上原文链接</p>
</blockquote>
<a id="more"></a>
<p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171207/kJHIIkgA2C.png?imageslim" alt="mark"><br><a href="http://oz1lum573.bkt.clouddn.com/c-jimmy/171207/kJHIIkgA2C.png?imageslim" target="_blank" rel="external">【查看大图】</a></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这个init()方法就是jQuery 原型对象上面的init()方法，也就是负责new出一个jquery对象()的方法</span>
    init <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> selector<span class="token punctuation">,</span> context<span class="token punctuation">,</span> root <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// match: 定义一个match值，以供后面进行代码的走向</span>
        <span class="token comment" spellcheck="true">// elem: 定义一个elem值，用于存储js原生方式获取的DOM对象</span>
        <span class="token keyword">var</span> match<span class="token punctuation">,</span> elem<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// HANDLE: $(""), $(null), $(undefined), $(false)</span>
        <span class="token comment" spellcheck="true">// 判断传入的字符串，当为空的时候，返回一个空的jquery对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>selector <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Method init() accepts an alternate rootjQuery</span>
        <span class="token comment" spellcheck="true">// so migrate can support jQuery.sub (gh-2101)</span>
        <span class="token comment" spellcheck="true">// 定义根节点 $(document)</span>
        root <span class="token operator">=</span> root <span class="token operator">||</span> rootjQuery<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Handle HTML strings</span>
        <span class="token comment" spellcheck="true">// 当传入内容不为空的时候，首先判断是否是string类型</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> selector <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果传入的selector是个HTML标签('&lt;div>' 或者'&lt;li>abc&lt;/li>')</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> selector<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"&lt;"</span> <span class="token operator">&amp;&amp;</span>
                selector<span class="token punctuation">[</span> selector<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">">"</span> <span class="token operator">&amp;&amp;</span>
                selector<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token comment" spellcheck="true">// Assume that strings that start and end with &lt;> are HTML and skip the regex check</span>
                match <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">null</span><span class="token punctuation">,</span> selector<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</span>
                match <span class="token operator">=</span> rquickExpr<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// Match html or make sure no context is specified for #id</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> match <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> match<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>context <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token comment" spellcheck="true">// HANDLE: $(html) -> $(array)</span>
                <span class="token comment" spellcheck="true">// 创建标签，包含</span>
                <span class="token comment" spellcheck="true">// 1：普通创建标签;  </span>
                <span class="token comment" spellcheck="true">// 2：HTML字符串，和包含属性事件方法的properties对象，创建DOM对象</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span> match<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 判断第二个参数是否是jquery对象，如果是，转成DOM对象</span>
                    context <span class="token operator">=</span> context <span class="token keyword">instanceof</span> <span class="token class-name">jQuery</span> <span class="token operator">?</span> context<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">:</span> context<span class="token punctuation">;</span>

                    <span class="token comment" spellcheck="true">// 创建普通标签元素 （以下统统属于普通标签创建方式）</span>
                    <span class="token comment" spellcheck="true">// $('&lt;li>') $('&lt;li/>') $('&lt;li>&lt;/li>') 最常见的单标签元素</span>
                    <span class="token comment" spellcheck="true">// $('&lt;li>&lt;li>') : 这种形式创建两个li标签元素</span>
                    <span class="token comment" spellcheck="true">// $('&lt;li title = "li-title">&lt;/li>') ：内置属性的标签元素</span>
                    <span class="token comment" spellcheck="true">// $('&lt;li>111&lt;/li>&lt;li>222&lt;/li>')： 多标签元素</span>
                    <span class="token comment" spellcheck="true">// $('&lt;ul>&lt;li>111&lt;/li>&lt;li>222&lt;/li>&lt;/ul>'): 含有子元素的标签元素</span>
                    jQuery<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> jQuery<span class="token punctuation">.</span><span class="token function">parseHTML</span><span class="token punctuation">(</span>
                        match<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
                        context <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>nodeType <span class="token operator">?</span> context<span class="token punctuation">.</span>ownerDocument <span class="token operator">||</span> context <span class="token punctuation">:</span> document<span class="token punctuation">,</span>
                        <span class="token boolean">true</span>
                    <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment" spellcheck="true">// HANDLE: $(html, props)</span>
                    <span class="token comment" spellcheck="true">// 根据HTML字符串，和包含属性事件方法的properties对象，创建DOM对象，并封装成jQuery对象；</span>
                    <span class="token comment" spellcheck="true">// var temBlog = $('&lt;a/>', {</span>
                    <span class="token comment" spellcheck="true">//     id: 'blog',</span>
                    <span class="token comment" spellcheck="true">//     title: 'C-jimmy博客',</span>
                    <span class="token comment" spellcheck="true">//     html: 'C-jimmy博客',</span>
                    <span class="token comment" spellcheck="true">//     href: 'http://c-jimmy.github.io',</span>
                    <span class="token comment" spellcheck="true">//     click: function() {</span>
                    <span class="token comment" spellcheck="true">//         // 具体事件代码</span>
                    <span class="token comment" spellcheck="true">//     }</span>
                    <span class="token comment" spellcheck="true">// });</span>
                    <span class="token comment" spellcheck="true">// 第一个参数是单标签形式 &amp;&amp; 第二个参数满足对象字面量形式</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span> rsingleTag<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> match<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> jQuery<span class="token punctuation">.</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span> context <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">// 创建传有属性对象的标签元素</span>
                        <span class="token comment" spellcheck="true">// 对传入的第二个参数json对象进行遍历</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span> match <span class="token keyword">in</span> context <span class="token punctuation">)</span> <span class="token punctuation">{</span>

                            <span class="token comment" spellcheck="true">// 判断json的name值是不是个jquery函数，如果是，则调用函数</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">[</span> match <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">this</span><span class="token punctuation">[</span> match <span class="token punctuation">]</span><span class="token punctuation">(</span> context<span class="token punctuation">[</span> match <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token comment" spellcheck="true">// 如果json的name值不是函数，则创建一个name值的属性</span>
                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span> match<span class="token punctuation">,</span> context<span class="token punctuation">[</span> match <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// HANDLE: $(#id)</span>
                <span class="token comment" spellcheck="true">// 传入ID值的情况下</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 获取id为传入id值的DOM元素</span>
                    elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span> match<span class="token punctuation">[</span> <span class="token number">2</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 如果DOM元素elem存在</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span> elem <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">// 将elem元素注入到jquery对象中</span>
                        <span class="token comment" spellcheck="true">// 将this存为类数组对象，所以需要手动定义length值</span>
                        <span class="token comment" spellcheck="true">// jquery对象的[0]项就是dom对象。所以需要吧获取的dom对象存入到this[0]中</span>
                        <span class="token keyword">this</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// HANDLE: $(expr, $(...))</span>
            <span class="token comment" spellcheck="true">// 当上下文context不存在的情况下，直接{}里面的代码</span>
            <span class="token comment" spellcheck="true">// 当上下文context存在，则判断这个context是否是jquery对象，</span>
            <span class="token comment" spellcheck="true">// context是jquery对象，则走{}里面的代码，不是则进入else模块</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>context <span class="token operator">||</span> context<span class="token punctuation">.</span>jquery <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// eg: $('ul', $(document)).find('li')  ,  $('ul') ,  $('.class1')</span>
                <span class="token comment" spellcheck="true">// 复杂的css选择器，都是通过find函数实现的。find最终调用的就是sizzle插件</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span> context <span class="token operator">||</span> root <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">;</span>  

            <span class="token comment" spellcheck="true">// HANDLE: $(expr, context)</span>
            <span class="token comment" spellcheck="true">// (which is just equivalent to: $(context).find(expr)</span>
            <span class="token comment" spellcheck="true">// eg: $('ul', document).find('li')</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// this.constructor == $ == jQuery </span>
                <span class="token comment" spellcheck="true">// find()方法只能通过jquery对象调用，所以需要吧DOM对象包装成jQuery对象才能使用find()</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span> context <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// HANDLE: $(DOMElement)</span>
        <span class="token comment" spellcheck="true">// 节点类型  eg:  $(this) , $(document)</span>
        <span class="token comment" spellcheck="true">// 只有节点类型的才有nodeType属相</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> selector<span class="token punctuation">.</span>nodeType <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 将elelctor元素注入到jquery对象中</span>
            <span class="token keyword">this</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> selector<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// HANDLE: $(function)</span>
        <span class="token comment" spellcheck="true">// Shortcut for document ready</span>
        <span class="token comment" spellcheck="true">// 函数形式 callback</span>
        <span class="token comment" spellcheck="true">// 在当前文档载入完成后，执行指定的函数callback</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> root<span class="token punctuation">.</span>ready <span class="token operator">!==</span> undefined <span class="token operator">?</span>
                root<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span> <span class="token punctuation">:</span>
                <span class="token function">selector</span><span class="token punctuation">(</span> jQuery <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// jQuery.makeArray： 将一个类数组对象转换为真正的对象并返回</span>
        <span class="token keyword">return</span> jQuery<span class="token punctuation">.</span><span class="token function">makeArray</span><span class="token punctuation">(</span> selector<span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> jQuery核心函数 </tag>
            
            <tag> jQuery.fn.init() </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery-源码分析（二）：jQuery核心函数]]></title>
      <url>/2017/12/02/jQuery-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AjQuery%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>jQuery()</code> 函数是jQuery库的最核心的函数，jQuery的一切都是基于此函数的，该函数主要用于获取HTML DOM元素并将其封装为jQuery对象，以便jQuery对象提供的其他属性和方法对DOM元素进行操作，<a id="more"></a>jQuery()函数内部实现的方式是调用jQuery.fn.init() 方法进行创建jQuery对象并返回  </p>
</blockquote>
<h2 id="jQuery-用法"><a href="#jQuery-用法" class="headerlink" title="jQuery()用法"></a>jQuery()用法</h2><h4 id="用法一"><a href="#用法一" class="headerlink" title="用法一"></a>用法一</h4><p><strong>查找DOM元素并封装为jQuery对象;</strong> 将选择器字符串selector所对应的HTML DOM元素封装为jQuery对象。可选参数context用于指定查找DOM元素的范围。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// [context]:指定选择器字符串的查找范围，可以是DOM元素、DOM元素数组、文档、jQuery对象。如果省略该参数，默认为当前文档。</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span> selector <span class="token punctuation">[</span><span class="token punctuation">,</span>context<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 示例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择当前文章中所有的P标签DOM元素，并封装成jQuery对象</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择id属性为username的DOM元素，并封装成jQuery对象</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择所有class为test的DOM元素，并封装成jQuery对象</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p .test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择带有test类的P标签元素，并封装成jQuery对象</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="用法二"><a href="#用法二" class="headerlink" title="用法二"></a>用法二</h4><p><strong>将DOM元素封装为jQuery对象;</strong>  将指定对象obj封装为jQuery对象。这个对象可以是一个DOM元素(Element)，也可以是一个DOM元素数组，也可以是一个jQuery对象(对其进行克隆)，或者其他对象。你也可以省略该参数，从而返回一个空的jQuery对象。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// [obj]:指定的对象，用于封装为jQuery对象。可以是DOM元素、DOM元素数组、文档、jQuery对象等。</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 示例</span>
<span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用js原生方法获取单个dom元素</span>
<span class="token function">$</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> doms <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用js原生方法获取dom元素数组</span>
<span class="token function">$</span><span class="token punctuation">(</span>doms<span class="token punctuation">)</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将空对象封装成jQuery对象</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将body元素封装为jQuery对象</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="用法三"><a href="#用法三" class="headerlink" title="用法三"></a>用法三</h4><p><strong>创建DOM元素并封装成jQuery对象;</strong>  根据HTML标签字符串html动态地创建临时DOM元素，并将其封装为jQuery对象。可选参数ownerDocument用于指定临时DOM元素在哪个文档中创建(如果存在多个文档的话，例如框架页面</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 指定的HTML标签字符串，例如"&lt;div/>"、"&lt;div>&lt;/div>"、"&lt;div id='tagId'>&lt;/div>"(标签中也可以嵌套标签，只要符合html语法即可)。</span>
<span class="token comment" spellcheck="true">// 指定DOM元素在哪个文档上进行临时创建，默认为当前文档。</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span> html <span class="token punctuation">[</span><span class="token punctuation">,</span>ownerDocument<span class="token punctuation">]</span> <span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 示例</span>
<span class="token comment" spellcheck="true">// 创建普通标签 （以下统统属于普通标签创建方式）</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;li>'</span><span class="token punctuation">)</span> 
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;li/>'</span><span class="token punctuation">)</span> 
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;li>&lt;/li>'</span><span class="token punctuation">)</span> 
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;li>&lt;li>'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这种形式创建两个li元素</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;li title = "li-title">&lt;/li>'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//内置属性的标签</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;li>111&lt;/li>&lt;li>222&lt;/li>'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//多标签</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;ul>&lt;li>111&lt;/li>&lt;li>222&lt;/li>&lt;/ul>'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//含有子元素的标签</span>

<span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
    &lt;table>
        &lt;tr>
            &lt;td>单元一&lt;/td>
            &lt;td>单元二&lt;/td>
        &lt;/tr>
        &lt;tr>
            &lt;td>单元三&lt;/td>
            &lt;td>单元四&lt;/td>
        &lt;/tr>
    &lt;/table>
`</span></span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个表格</span>

<span class="token comment" spellcheck="true">// 内部实现</span>
jQuery<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> jQuery<span class="token punctuation">.</span><span class="token function">parseHTML</span><span class="token punctuation">(</span>
      match<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      document<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 也可以是iframe中其他页面的document</span>
      <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="用法四"><a href="#用法四" class="headerlink" title="用法四"></a>用法四</h4><p><strong>根据HTML字符串，和包含属性事件方法的properties对象，创建DOM对象，并封装成jQuery对象；</strong>  </p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// properties: 指定的对象，用于指定DOM元素的属性、事件和方法。例如：{name:"username", "click":function(){}}</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span> html <span class="token punctuation">,</span> properties <span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 示例</span>
<span class="token keyword">var</span> temBlog <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;a/>'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token string">'blog'</span><span class="token punctuation">,</span>
    title<span class="token punctuation">:</span> <span class="token string">'C-jimmy博客'</span><span class="token punctuation">,</span>
    html<span class="token punctuation">:</span> <span class="token string">'C-jimmy博客'</span><span class="token punctuation">,</span>
    href<span class="token punctuation">:</span> <span class="token string">'http://c-jimmy.github.io'</span><span class="token punctuation">,</span>
    click<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 具体事件代码</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
temBlog<span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 追加到body标签内容的末尾</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;input/>'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span>
    val<span class="token punctuation">:</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 表示表单元素的value属性值或textarea的输入内容</span>
    click<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点击了复选框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 内部实现</span>
<span class="token comment" spellcheck="true">// 对传入的第二个参数对象进行遍历</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> match <span class="token keyword">in</span> context <span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// 判断json的name值是不是个jquery函数，如果是，则调用函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">[</span> match <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">[</span> match <span class="token punctuation">]</span><span class="token punctuation">(</span> context<span class="token punctuation">[</span> match <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 如果json的name值不是函数，则创建一个name值的属性</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span> match<span class="token punctuation">,</span> context<span class="token punctuation">[</span> match <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="用法五"><a href="#用法五" class="headerlink" title="用法五"></a>用法五</h4><p><strong>在当前文档载入完成后，执行指定的函数callback。</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">jQuery</span><span class="token punctuation">(</span> callback <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 示例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 本文档页面载入后自动执行这段代码</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// document文档ready后，自动执行这段代码</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jQuery-fn-init方法"><a href="#jQuery-fn-init方法" class="headerlink" title="jQuery.fn.init方法"></a>jQuery.fn.init方法</h2><blockquote>
<p>调用jQuery方法后，会通过jQuery.fn.init()方法进行实例化一个jQuery对象。jQuery.fn.init的功能是对传进来的selector参数进行分析，进行各种不同的处理，然后生成jQuery对象。<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171207/kJHIIkgA2C.png?imageslim" alt="mark"><br><a href="http://oz1lum573.bkt.clouddn.com/c-jimmy/171207/kJHIIkgA2C.png?imageslim" target="_blank" rel="external">【查看大图】</a></p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// selector: 选择器</span>
<span class="token comment" spellcheck="true">// context: 上下文</span>
<span class="token comment" spellcheck="true">// root: 实例[ init 内部定义的，不是我们手动从外部传入的]</span>
init <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> selector<span class="token punctuation">,</span> context<span class="token punctuation">,</span> root <span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// HANDLE: $(""), $(null), $(undefined), $(false)</span>
        <span class="token comment" spellcheck="true">// 判断传入的参数selector, 如果为'', null, undefined, false; </span>
        <span class="token comment" spellcheck="true">// 直接返回当前init实例对象( 这时这个实例对象实际上是一个空的jquery对象 )</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>selector <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Handle HTML strings</span>
        <span class="token comment" spellcheck="true">// 1. 判断传入参数类型是否为 string</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> selector <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// ...</span>

        <span class="token comment" spellcheck="true">// HANDLE: $(DOMElement)</span>
        <span class="token comment" spellcheck="true">// 2. 如果不是 string类型，则判断是否有nodeType属性【nodeType属性是DOM元素特有的属性】</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> selector<span class="token punctuation">.</span>nodeType <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> selector<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// HANDLE: $(function)</span>
        <span class="token comment" spellcheck="true">// 3. 如果不是string类型，也不是DOM元素，则判断是否是函数类型</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> root<span class="token punctuation">.</span>ready <span class="token operator">!==</span> undefined <span class="token operator">?</span>
                root<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span> <span class="token punctuation">:</span>
                <span class="token function">selector</span><span class="token punctuation">(</span> jQuery <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>init完整源码分析，请看下一节</p>
<p>参考文献：<br><a href="http://blog.csdn.net/lfcss/article/details/52086823" target="_blank" rel="external">jQuery源码研究分析学习笔记</a><br><a href="http://blog.csdn.net/lihongxun945/article/details/10304285" target="_blank" rel="external">jquery 实现原理二：core.js</a></p>
<p>参考文献：<br><a href="http://blog.csdn.net/lfcss/article/details/52086823" target="_blank" rel="external">jQuery源码研究分析学习笔记</a><br><a href="http://blog.csdn.net/lihongxun945/article/details/10304285" target="_blank" rel="external">jquery 实现原理二：core.js</a></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> jQuery核心函数 </tag>
            
            <tag> jQuery.fn.init() </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery-源码分析（一）：自执行与构建原理]]></title>
      <url>/2017/12/02/jQuery-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%87%AA%E6%89%A7%E8%A1%8C%E4%B8%8E%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="jQuery-的自执行结构"><a href="#jQuery-的自执行结构" class="headerlink" title="jQuery 的自执行结构"></a>jQuery 的自执行结构</h4><p>jQuery中的代码，都被包含在了一个立即执行函数里面，为了不污染外部的全局作用域，只暴露出了$ 和jQuery这两个变量<br><a id="more"></a></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// jquery 具体内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 立即执行函数方式</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>为什么要传入window?</strong><br>首先要明白，其实传入参数window, 函数内部也可以使用全局作用域的window, 那么传入window参数有什么好处呢？</p>
<ol>
<li>可以提高程序效率<br> 为什么能提高效率，得从javascript的机制说起，所谓的scope chain作用域链，在当前作用域中如果没有该属性（局部变量）则向上一层作用域中寻找，一直到最上层，也就是window，查找速度慢。也就是说全局变量和下级作用域都是window的一个属性，向下依此类推。通过传入window变量，使得window 由全局变量变为局部变量，当在 jQuery 代码块中访问 window时，不需要将作用域链回退到顶层作用域，这样可以更快的访问window，查找速度快；</li>
<li>压缩代码时可以进行优化<br> 将window作为参数传入，可以在代码压缩时候进行优化，例如：<code>(function(w,n){}){window}; // window 被优化成 w</code>。 如果没有传入window参数，那么jquery内部所有window都必须全称，才能按照作用域链访问到全局作用域下的window对象</li>
</ol>
<p><strong>为什么要传入undefined?</strong><br>ES5之前，js有个bug, undefined能够被重写；<br>传入undefined的作用；就算外面的人把 undefined 定义了，里面的 undefined 依然不受影响。大概是为了最大程度防止外界的变量定义对所做封装的内部造成影响。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.演示下不传入undefined 容易出现的bug</span>
<span class="token keyword">var</span> undefined <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 假设外部undefined 被程序员重写了</span>

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token punctuation">{</span>   
    <span class="token function">alert</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 由于外部undefined被重写，undefined值变成了8</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span> 


<span class="token comment" spellcheck="true">// 2.演示传入undefined 的情况</span>
<span class="token keyword">var</span> undefinde <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 假设外部undefined 被程序员重写了</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 注意此处，实参并没有转入第二个参数</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="jQuery-的构建原理"><a href="#jQuery-的构建原理" class="headerlink" title="jQuery 的构建原理"></a>jQuery 的构建原理</h4><blockquote>
<p><strong>jQuery框架的核心就是从HTML文档中匹配元素并对其执行操作。</strong>  </p>
</blockquote>
<p>我们是用jQuery实例化一个jQuery对象的时候</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 无 new 结构</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'jQuery源码分析'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 我们也可以使用 new 结构</span>
<span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'jQuery源码分析'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大部分人使用 jQuery 的时候都是使用第一种无 new 的构造方式，直接 $(‘’) 进行构造，这也是 jQuery 十分便捷的一个地方。当我们使用第一种无 new 构造方式的时候，其本质就是相当于 new jQuery()，那么在 jQuery 内部是如何实现的呢？  </p>
<p>要实现这一点，最直接的思路就是在构造函数jQuery内，直接 return 一个实例对象</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> jQuery <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 在这里定义方法</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是这样操作的话，就会出现死循环，一调用jQuery()就new一个对象，new对象的时候，又需要调jQuery()…..  </p>
<p>最简单的解决方法就是借用了一个构造函数：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> jQuery <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">init</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当调用jQuery的时候，返回一个init的实例</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处定义一个新的构造函数 init();</span>
init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 这里定义jquery的方法</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>jQuery作者或许因为代码洁癖的原因（jquery的方法定义在 init.prototype 中）；采用了另一种更加优雅的方式</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> jQuery <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// new 一个存放在jQuery原型对象上的init()方法实例</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 其他方法</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 将init()的原型指向jQuery的原型，就可以实现init实例继承jQuery原型对象的方法</span>
jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考资料：<br><a href="http://blog.csdn.net/juddy123/article/details/72731620" target="_blank" rel="external"> javascript，jQuery自执行函数(匿名函数）为什么要把windows, jQuery, undefined作为参数传进去</a><br><a href="https://www.cnblogs.com/kidney/p/5879255.html" target="_blank" rel="external">jQuery( )方法的构建原理</a><br><a href="https://www.cnblogs.com/coco1s/p/5261646.html" target="_blank" rel="external">【深入浅出jQuery】源码浅析–整体架构</a></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 自执行函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js this关键字]]></title>
      <url>/2017/11/30/js-this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><blockquote>
<ul>
<li>它代表 <strong><em>函数运行</em></strong> 时，<strong><em>自动生成</em></strong> 的一个<strong><em>内部对象</em></strong>，只能在<strong><em>内部</em></strong> 使用</li>
<li>谁调用它，this就指向谁<a id="more"></a>
<h4 id="分四种情况"><a href="#分四种情况" class="headerlink" title="分四种情况"></a>分四种情况</h4></li>
</ul>
</blockquote>
<ul>
<li><h5 id="纯粹的函数调用"><a href="#纯粹的函数调用" class="headerlink" title="纯粹的函数调用"></a>纯粹的函数调用</h5><blockquote>
<p>这是函数的最通常用法，属于全局性调用，因此this就代表全局对象Global。</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 2</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 2</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0</span>
<span class="token punctuation">}</span> 
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><h5 id="作为对象方法的调用"><a href="#作为对象方法的调用" class="headerlink" title="作为对象方法的调用"></a>作为对象方法的调用</h5><blockquote>
<p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span>m <span class="token operator">=</span> test<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将函数test作为对象o的一个方法；</span>
o<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><h5 id="作为构造函数调用"><a href="#作为构造函数调用" class="headerlink" title="作为构造函数调用"></a>作为构造函数调用</h5><blockquote>
<p>函数作为构造函数new 出一个新对象（object）,这时，this指向这个生成的新对象</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2 表明去全局变量x的值没有变</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><h5 id="apply调用"><a href="#apply调用" class="headerlink" title="apply调用"></a>apply调用</h5><blockquote>
<p><strong>apply/call记忆方法：</strong><br>猫吃鱼，狗吃肉，奥特曼打小怪兽。<br>有天狗想吃鱼了<br>猫.吃鱼.call(狗，鱼)<br>狗就吃到鱼了<br>猫成精了，想打怪兽<br>奥特曼.打小怪兽.call(猫，小怪兽)</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>m <span class="token operator">=</span> test<span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 0 apply()的参数为空时，默认调用全局对象。</span>
obj<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考文章<br><a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html" target="_blank" rel="external">Javascript的this用法</a><br><a href="https://www.zhihu.com/question/20289071" target="_blank" rel="external">如何理解和熟练运用js中的call及apply</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[keep-alive缓存组件]]></title>
      <url>/2017/11/13/keep-alive%E7%BC%93%E5%AD%98%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>vue2.0提供了一个keep-alive组件<br>用来缓存组件,避免多次加载相应的组件,减少性能消耗<br><a id="more"></a></p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 组件将被缓存 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有时候 可能需要缓存整个站点的所有页面,将首次触发请求写在created钩子函数中,就能实现缓存,比如列表页,去了详情页 回来,还是在原来的页面</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="缓存部分组件"><a href="#缓存部分组件" class="headerlink" title="缓存部分组件"></a>缓存部分组件</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//所有商铺列表页,此组件设置了meta项，其中keepAlive值为true</span>
<span class="token punctuation">{</span>
    path<span class="token punctuation">:</span> <span class="token string">'/msite'</span><span class="token punctuation">,</span>
    component<span class="token punctuation">:</span> msite<span class="token punctuation">,</span>
    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment" spellcheck="true">//特色商铺列表页</span>
<span class="token punctuation">{</span>
    path<span class="token punctuation">:</span> <span class="token string">'/food'</span><span class="token punctuation">,</span>
    component<span class="token punctuation">:</span> food
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--检测组件路由中‘$route.meta.keepAlive’的值，为真的时候，使用&lt;keep-alive>缓存组件，同时为组件添加效果--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>router-fade<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--需要keepalive缓存的--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$route.meta.keepAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>router-fade<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--不需要keepalive缓存的--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!$route.meta.keepAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="动态判断是否缓存"><a href="#动态判断是否缓存" class="headerlink" title="动态判断是否缓存"></a>动态判断是否缓存</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>includedComponents<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-js"><code class="language-js">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        includedComponents<span class="token punctuation">:</span> <span class="token punctuation">[</span>Home<span class="token punctuation">,</span> Login<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//类型为数组，里面为需要缓存的组件名称</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> keep-alive </tag>
            
            <tag> 缓存组件 </tag>
            
            <tag> vue性能优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git bash 中文乱码问题]]></title>
      <url>/2017/11/09/git-bash-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>windows下运行<code>git bash</code>时，经常出现中文乱码问题<br><a id="more"></a><br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/dakDhHb664.png?imageslim" alt="mark"></p>
<p>是因为中文编码的问题，解决办法如下</p>
<h3 id="右击-git-bash-界面，选择Options"><a href="#右击-git-bash-界面，选择Options" class="headerlink" title="右击 git bash 界面，选择Options"></a>右击 <code>git bash</code> 界面，选择Options</h3><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/LI87b6bc0H.png?imageslim" alt="mark"></p>
<h3 id="选择左侧text"><a href="#选择左侧text" class="headerlink" title="选择左侧text"></a>选择左侧text</h3><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/fc9L6f9L5i.png?imageslim" alt="mark"></p>
<h3 id="为中文选择UTF编码"><a href="#为中文选择UTF编码" class="headerlink" title="为中文选择UTF编码"></a>为中文选择UTF编码</h3><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/619h01el4i.png?imageslim" alt="mark"></p>
<h3 id="重启git-bash"><a href="#重启git-bash" class="headerlink" title="重启git bash"></a>重启<code>git bash</code></h3><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/DdmHbLhH7E.png?imageslim" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git bash </tag>
            
            <tag> 中文乱码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用七牛图床为博客存储图片]]></title>
      <url>/2017/11/08/%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>图床一般是指储存图片的服务器，同时允许您把图片通过链接插入到其他网站<br><a id="more"></a><br>国内有很多不错的图床。比如腾讯云，网易蜂巢，七牛云<br>试用了七牛，感觉还是很不错的，有10GB免费存储，每个月10G流量，用做博客图片等资源存储，非常的适合  </p>
<h4 id="注册七牛云"><a href="#注册七牛云" class="headerlink" title="注册七牛云"></a>注册七牛云</h4><h5 id="首先需要注册七牛云账号"><a href="#首先需要注册七牛云账号" class="headerlink" title="首先需要注册七牛云账号"></a>首先需要<a href="https://portal.qiniu.com/signup?code=3ldl7o056iqtu" target="_blank" rel="external">注册七牛云账号</a></h5><h5 id="创建存储空间"><a href="#创建存储空间" class="headerlink" title="创建存储空间"></a>创建存储空间</h5><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/3ff93mbJGl.png?imageslim" alt="mark"></p>
<p>存储空间名称作为唯一的 Bucket 识别符<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/2D1fef6gBk.png?imageslim" alt="mark"></p>
<h5 id="测试域名"><a href="#测试域名" class="headerlink" title="测试域名"></a>测试域名</h5><p>每个存储空间系统都会默认分配一个测试域名，以后上传的图片会挂载在这个域名下面，有条件的最好自己配置一个域名（测试域名限流量限速），此处不做讲解，自行百度<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/jadm23gk7A.png?imageslim" alt="mark"></p>
<h4 id="使用Mpic-图床神器"><a href="#使用Mpic-图床神器" class="headerlink" title="使用Mpic 图床神器"></a>使用Mpic 图床神器</h4><p>MPic是一款针对七牛云存储智能上传图片的图床工具，图片上传,无水印,不压缩图片质量,外链无限制,国内空间绝不会被墙，支持粘贴上传、拖放上传，一键复制 markdown 链接的图床，简单好用，无需注册。  </p>
<h5 id="下载图床神器"><a href="#下载图床神器" class="headerlink" title="下载图床神器"></a>下载图床神器</h5><p><a href="http://oz1lum573.bkt.clouddn.com/MPic%202.2.1.3.rar" target="_blank" rel="external">图床神器</a></p>
<h5 id="配置账号信息"><a href="#配置账号信息" class="headerlink" title="配置账号信息"></a>配置账号信息</h5><p>点击设置账号<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/AjH1dAK5FJ.png?imageslim" alt="mark">  </p>
<p>配置账号信息，空间名为七牛账户创建的存储空间名，AccessKey和AecretKey到七牛个人设置，秘钥处获取，域名为创建存储空间时系统分配的测试域名（如果自己配置了域名，则填自己配置好的域名）</p>
<p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/8FGEJkbkHb.png?imageslim" alt="mark"></p>
<h4 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h4><p>在编辑博客后者其他文档的时候，把图片拖拽到图床神器，图床神器会自动上传并生成网络地址，博客中直接插入地址即可</p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 七牛 </tag>
            
            <tag> 图床 </tag>
            
            <tag> 图床神器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ssh公钥实现对远程仓库的无口令访问]]></title>
      <url>/2017/11/08/%E4%BD%BF%E7%94%A8ssh%E5%85%AC%E9%92%A5%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%97%A0%E5%8F%A3%E4%BB%A4%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<h4 id="使用ssh公钥实现对远程仓库的无口令访问"><a href="#使用ssh公钥实现对远程仓库的无口令访问" class="headerlink" title="使用ssh公钥实现对远程仓库的无口令访问"></a>使用ssh公钥实现对远程仓库的无口令访问</h4><a id="more"></a>
<blockquote>
<p>当一个主机对应多个远程仓库账户时，使用https协议 ( github、 码云、bitbucket等远程仓库都支持https协议和SSH协议 ) 进行仓库的克隆、上传时，每次都需要输入当前远程仓库账户的用户名和密码，这时候可以使用SSH协议实现对远程仓库的无口令访问，使用SSH协议需要主机生成ssh-keys文件，然后把这个ssh-keys配置到你的远程账户下方可使用</p>
</blockquote>
<ul>
<li>在 Git Base 中运行以下命令生成本机公钥与私钥（没有git base 的先百度下载安装“git for windows”）<pre><code>ssh-keygen
</code></pre></li>
<li>找到刚才所生成的公钥（默认放在：<code>/c/Users/Administrator/.ssh/</code>文件夹下，其中<code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥，这里需要使用的是公钥）</li>
<li>用编辑器打开公钥<code>id_rsa.pub</code>，复制里面的内容</li>
<li>登录你的远程仓库账户（github、bitbucket、码云） -&gt; 设置（settings） -&gt; SSH公钥（SSH and GPG keys）-&gt; 添加公钥（New SSH key）</li>
<li>在公钥（key）处粘贴刚才复制好的代码，标题（Title）可以自定义，如“company/home….”</li>
<li>点击确定（Add SSH key）后。需要再次验证当前账户的密码<blockquote>
<p>注意：使用远程仓库的时候，需要使用SSH协议地址; 生成的一个公钥，可以放在多个远程账户上使用；同时一般远程仓库都可以存放多个公钥</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 公钥 </tag>
            
            <tag> 无口令访问 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue环境搭建]]></title>
      <url>/2017/11/07/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ul>
<li><h4 id="github上建立一个仓库"><a href="#github上建立一个仓库" class="headerlink" title="github上建立一个仓库"></a>github上建立一个仓库</h4><ul>
<li>登录github</li>
<li>新建一个仓库</li>
<li>本地项目文件夹下运行以下命令<pre><code>  git init
  git status
  git add .
  git commit -m &quot;第一次提交&quot;
  // 第一次需要绑定github地址
  git remote add origin [仓库地址]
  git push origin master
</code></pre><a id="more"></a></li>
</ul>
</li>
<li><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><ul>
<li><h5 id="安装nodejs环境-nodejs-org下载安装"><a href="#安装nodejs环境-nodejs-org下载安装" class="headerlink" title="安装nodejs环境(nodejs.org下载安装)"></a>安装nodejs环境(nodejs.org下载安装)</h5></li>
<li><h5 id="安装git客户端（git-for-windows，下载并安装）"><a href="#安装git客户端（git-for-windows，下载并安装）" class="headerlink" title="安装git客户端（git-for-windows，下载并安装）"></a>安装git客户端（git-for-windows，下载并安装）</h5></li>
<li><h5 id="安装cnpm环境"><a href="#安装cnpm环境" class="headerlink" title="安装cnpm环境"></a>安装cnpm环境</h5><pre><code>  // 安装好&quot;git for window&quot;后，在任何文件夹下右击空白处，打开&quot;git bash&quot;

  npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre><h6 id="注意：-git-bash-相当于一个美化后的命令行窗口"><a href="#注意：-git-bash-相当于一个美化后的命令行窗口" class="headerlink" title=" 注意： git bash 相当于一个美化后的命令行窗口 "></a><strong> 注意： git bash 相当于一个美化后的命令行窗口 </strong></h6></li>
<li><h5 id="安装bower环境"><a href="#安装bower环境" class="headerlink" title="安装bower环境"></a>安装bower环境</h5><pre><code>  cnpm install bower -g
</code></pre><h6 id="注意：-bower不是必须安装的包，bower用来查看其它包的版本非常的方便，安装后执行-bower-info-vue-即可。其中vue可替换成任意的包"><a href="#注意：-bower不是必须安装的包，bower用来查看其它包的版本非常的方便，安装后执行-bower-info-vue-即可。其中vue可替换成任意的包" class="headerlink" title=" 注意： bower不是必须安装的包，bower用来查看其它包的版本非常的方便，安装后执行 bower info vue 即可。其中vue可替换成任意的包"></a><strong> 注意： bower不是必须安装的包，bower用来查看其它包的版本非常的方便，安装后执行 bower info vue 即可。其中vue可替换成任意的包</strong></h6></li>
<li><h5 id="安装vue-cli脚手架环境"><a href="#安装vue-cli脚手架环境" class="headerlink" title="安装vue-cli脚手架环境"></a>安装vue-cli脚手架环境</h5><pre><code>  // i = install, g = global 
  cnpm i vue-cli -g
</code></pre></li>
</ul>
</li>
<li><h4 id="使用vue-cli脚手架构建一个项目"><a href="#使用vue-cli脚手架构建一个项目" class="headerlink" title="使用vue-cli脚手架构建一个项目"></a>使用vue-cli脚手架构建一个项目</h4><pre><code>  // 安装webpack-simple 类型的项目结构
  vue init webpack-simple vue-demo1
  // 进入vue-demo1模块
  cd vue-demo1
  // 安装项目依赖
  cnpm install
  // 运行项目
  npm run dev
</code></pre><h6 id="注意：国内建议使用cnpm安装依赖，如果总是安装失败，请检查磁盘类型是不是fat32的，如果是，请转为ntfs类型再执行安装依赖操作。转换方式，命令行输入-convert-fs-ntfs-，其中-代表需要转换的磁盘-；"><a href="#注意：国内建议使用cnpm安装依赖，如果总是安装失败，请检查磁盘类型是不是fat32的，如果是，请转为ntfs类型再执行安装依赖操作。转换方式，命令行输入-convert-fs-ntfs-，其中-代表需要转换的磁盘-；" class="headerlink" title=" 注意：国内建议使用cnpm安装依赖，如果总是安装失败，请检查磁盘类型是不是fat32的，如果是，请转为ntfs类型再执行安装依赖操作。转换方式，命令行输入 convert *:/fs:ntfs ，其中* 代表需要转换的磁盘 ；"></a><strong> 注意：国内建议使用cnpm安装依赖，如果总是安装失败，请检查磁盘类型是不是fat32的，如果是，请转为ntfs类型再执行安装依赖操作。转换方式，命令行输入 convert *:/fs:ntfs ，其中* 代表需要转换的磁盘 </strong>；</h6></li>
<li><h4 id="安装常用模块"><a href="#安装常用模块" class="headerlink" title="安装常用模块"></a>安装常用模块</h4><pre><code>  // 安装vuex, 以--save方式安装
  cnpm i vuex -S
  // 安装style-loader, 以--save-dev方式安装
  cnpm i style -D
</code></pre></li>
<li><h4 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h4><pre><code>  {
      test: /\.css$/,
      loader: &#39;style-loader!css-loader&#39;
    },
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[gallery]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[links]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
