<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[jQuery 源码分析（一）：闭包与构建原理]]></title>
      <url>/2017/12/02/jQuery-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%97%AD%E5%8C%85%E4%B8%8E%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="jQuery-的闭包结构"><a href="#jQuery-的闭包结构" class="headerlink" title="jQuery 的闭包结构"></a>jQuery 的闭包结构</h4><p>jQuery中的代码，都被包含在了一个立即执行函数里面，为了不污染外部的全局作用域，只暴露出了$ 和jQuery这两个变量<br><a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">    <span class="comment">// jquery 具体内容</span></div><div class="line">&#125;)(<span class="built_in">window</span>)    <span class="comment">// 立即执行函数方式</span></div></pre></td></tr></table></figure>
<p><strong>为什么要传入window?</strong><br>首先要明白，其实传入参数window, 函数内部也可以使用全局作用域的window, 那么传入window参数有什么好处呢？</p>
<ol>
<li>可以提高程序效率<br> 为什么能提高效率，得从javascript的机制说起，所谓的scope chain作用域链，在当前作用域中如果没有该属性（局部变量）则向上一层作用域中寻找，一直到最上层，也就是window，查找速度慢。也就是说全局变量和下级作用域都是window的一个属性，向下依此类推。通过传入window变量，使得window 由全局变量变为局部变量，当在 jQuery 代码块中访问 window时，不需要将作用域链回退到顶层作用域，这样可以更快的访问window，查找速度快；</li>
<li>压缩代码时可以进行优化<br> 将window作为参数传入，可以在代码压缩时候进行优化，例如：<code>(function(w,n){}){window}; // window 被优化成 w</code>。 如果没有传入window参数，那么jquery内部所有window都必须全称，才能按照作用域链访问到全局作用域下的window对象</li>
</ol>
<p><strong>为什么要传入undefined?</strong><br>ES5之前，js有个bug, undefined能够被重写；<br>传入undefined的作用；就算外面的人把 undefined 定义了，里面的 undefined 依然不受影响。大概是为了最大程度防止外界的变量定义对所做封装的内部造成影响。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.演示下不传入undefined 容易出现的bug</span></div><div class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="number">8</span>;  <span class="comment">// 假设外部undefined 被程序员重写了</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;   </div><div class="line">    alert(<span class="literal">undefined</span>);   <span class="comment">// 由于外部undefined被重写，undefined值变成了8</span></div><div class="line">&#125;)(<span class="built_in">window</span>); </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 2.演示传入undefined 的情况</span></div><div class="line"><span class="keyword">var</span> undefinde = <span class="number">8</span>;  <span class="comment">// 假设外部undefined 被程序员重写了</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">    alert(<span class="literal">undefined</span>);   <span class="comment">// undefined</span></div><div class="line">&#125;)(<span class="built_in">window</span>)          <span class="comment">// 注意此处，实参并没有转入第二个参数</span></div></pre></td></tr></table></figure></p>
<h4 id="jQuery-的构建原理"><a href="#jQuery-的构建原理" class="headerlink" title="jQuery 的构建原理"></a>jQuery 的构建原理</h4><blockquote>
<p><strong>jQuery框架的核心就是从HTML文档中匹配元素并对其执行操作。</strong>  </p>
</blockquote>
<p>我们是用jQuery实例化一个jQuery对象的时候<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 无 new 结构</span></div><div class="line">$(<span class="string">'#test'</span>).html(<span class="string">'jQuery源码分析'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 我们也可以使用 new 结构</span></div><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> $(<span class="string">'#test'</span>);</div><div class="line">test.html(<span class="string">'jQuery源码分析'</span>)</div></pre></td></tr></table></figure></p>
<p>大部分人使用 jQuery 的时候都是使用第一种无 new 的构造方式，直接 $(‘’) 进行构造，这也是 jQuery 十分便捷的一个地方。当我们使用第一种无 new 构造方式的时候，其本质就是相当于 new jQuery()，那么在 jQuery 内部是如何实现的呢？  </p>
<p>要实现这一点，最直接的思路就是在构造函数jQuery内，直接 return 一个实例对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery()</div><div class="line">&#125;</div><div class="line">jQuery.prototype = &#123;</div><div class="line">    <span class="comment">// 在这里定义方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是这样操作的话，就会出现死循环，一调用jQuery()就new一个对象，new对象的时候，又需要调jQuery()…..  </p>
<p>最简单的解决方法就是借用了一个构造函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> init;        <span class="comment">// 当调用jQuery的时候，返回一个init的实例</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">// 此处定义一个新的构造函数 init();</span></div><div class="line">init.prototype = &#123;</div><div class="line">    <span class="comment">// 这里定义jquery的方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jQuery作者或许因为代码洁癖的原因（jquery的方法定义在 init.prototype 中）；采用了另一种更加优雅的方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// new 一个存放在jQuery原型对象上的init()方法实例</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery.prototype.init();</div><div class="line">&#125;</div><div class="line"></div><div class="line">jQuery.prototype = &#123;</div><div class="line">    init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    <span class="comment">// 其他方法</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 将init()的原型指向jQuery的原型，就可以实现init实例继承jQuery原型对象的方法</span></div><div class="line">jQuery.prototype.init.prototype = jQuery.prototype;</div></pre></td></tr></table></figure></p>
<p>参考资料：<br><a href="http://blog.csdn.net/juddy123/article/details/72731620" target="_blank" rel="external"> javascript，jQuery自执行函数(匿名函数）为什么要把windows, jQuery, undefined作为参数传进去</a><br><a href="https://www.cnblogs.com/kidney/p/5879255.html" target="_blank" rel="external">jQuery( )方法的构建原理</a><br><a href="https://www.cnblogs.com/coco1s/p/5261646.html" target="_blank" rel="external">【深入浅出jQuery】源码浅析–整体架构</a></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> jquery闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js this关键字]]></title>
      <url>/2017/11/30/js-this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><blockquote>
<ul>
<li><strong>它代表==函数运行时==，==自动生成==的一个==内部对象==，只能在==内部==使用</strong></li>
<li><strong>谁调用它，this就指向谁</strong><a id="more"></a>
<h4 id="分四种情况"><a href="#分四种情况" class="headerlink" title="分四种情况"></a>分四种情况</h4></li>
</ul>
</blockquote>
<ul>
<li><h5 id="纯粹的函数调用"><a href="#纯粹的函数调用" class="headerlink" title="纯粹的函数调用"></a>纯粹的函数调用</h5><blockquote>
<p>这是函数的最通常用法，属于全局性调用，因此this就代表全局对象Global。</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">var</span> x = <span class="number">2</span>;</div><div class="line">    alert(x);       <span class="comment">// 2</span></div><div class="line">    alert(<span class="keyword">this</span>.x);  <span class="comment">// 1</span></div><div class="line">    </div><div class="line">    <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">    alert(x);       <span class="comment">// 2</span></div><div class="line">    alert(<span class="keyword">this</span>.x);  <span class="comment">// 0</span></div><div class="line">&#125; </div><div class="line">test(); </div><div class="line">alert(x);           <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<ul>
<li><h5 id="作为对象方法的调用"><a href="#作为对象方法的调用" class="headerlink" title="作为对象方法的调用"></a>作为对象方法的调用</h5><blockquote>
<p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>).x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">o.x = <span class="number">1</span>;</div><div class="line">o.m = test; <span class="comment">// 将函数test作为对象o的一个方法；</span></div><div class="line">o.m();      <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<ul>
<li><h5 id="作为构造函数调用"><a href="#作为构造函数调用" class="headerlink" title="作为构造函数调用"></a>作为构造函数调用</h5><blockquote>
<p>函数作为构造函数new 出一个新对象（object）,这时，this指向这个生成的新对象</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Test();</div><div class="line">alert(x);   <span class="comment">// 2 表明去全局变量x的值没有变</span></div></pre></td></tr></table></figure>
<ul>
<li><h5 id="apply调用"><a href="#apply调用" class="headerlink" title="apply调用"></a>apply调用</h5><blockquote>
<p><strong>apply/call记忆方法：</strong><br>猫吃鱼，狗吃肉，奥特曼打小怪兽。<br>有天狗想吃鱼了<br>猫.吃鱼.call(狗，鱼)<br>狗就吃到鱼了<br>猫成精了，想打怪兽<br>奥特曼.打小怪兽.call(猫，小怪兽)</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.x = <span class="number">1</span>;</div><div class="line">obj.m = test;</div><div class="line">obj.m.apply();      <span class="comment">// 0 apply()的参数为空时，默认调用全局对象。</span></div><div class="line">obj.m.apply(obj);   <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>参考文章<br><a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html" target="_blank" rel="external">Javascript的this用法</a><br><a href="https://www.zhihu.com/question/20289071" target="_blank" rel="external">如何理解和熟练运用js中的call及apply</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[keep-alive缓存组件]]></title>
      <url>/2017/11/13/keep-alive%E7%BC%93%E5%AD%98%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>vue2.0提供了一个keep-alive组件<br>用来缓存组件,避免多次加载相应的组件,减少性能消耗<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">component</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 组件将被缓存 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>有时候 可能需要缓存整个站点的所有页面,将首次触发请求写在created钩子函数中,就能实现缓存,比如列表页,去了详情页 回来,还是在原来的页面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="缓存部分组件"><a href="#缓存部分组件" class="headerlink" title="缓存部分组件"></a>缓存部分组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//所有商铺列表页,此组件设置了meta项，其中keepAlive值为true</span></div><div class="line">&#123;</div><div class="line">    path: <span class="string">'/msite'</span>,</div><div class="line">    component: msite,</div><div class="line">    meta: &#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;,</div><div class="line">&#125;,</div><div class="line"><span class="comment">//特色商铺列表页</span></div><div class="line">&#123;</div><div class="line">    path: <span class="string">'/food'</span>,</div><div class="line">    component: food</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--检测组件路由中‘$route.meta.keepAlive’的值，为真的时候，使用&lt;keep-alive&gt;缓存组件，同时为组件添加效果--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"router-fade"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></div><div class="line">    	<span class="comment">&lt;!--需要keepalive缓存的--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"$route.meta.keepAlive"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"router-fade"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--不需要keepalive缓存的--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"!$route.meta.keepAlive"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="动态判断是否缓存"><a href="#动态判断是否缓存" class="headerlink" title="动态判断是否缓存"></a>动态判断是否缓存</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"includedComponents"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        includedComponents: [Home, Login] <span class="comment">//类型为数组，里面为需要缓存的组件名称</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> keep-alive </tag>
            
            <tag> 缓存组件 </tag>
            
            <tag> vue性能优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git bash 中文乱码问题]]></title>
      <url>/2017/11/09/git-bash-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>windows下运行<code>git bash</code>时，经常出现中文乱码问题<br><a id="more"></a><br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/dakDhHb664.png?imageslim" alt="mark"></p>
<p>是因为中文编码的问题，解决办法如下</p>
<h3 id="右击-git-bash-界面，选择Options"><a href="#右击-git-bash-界面，选择Options" class="headerlink" title="右击 git bash 界面，选择Options"></a>右击 <code>git bash</code> 界面，选择Options</h3><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/LI87b6bc0H.png?imageslim" alt="mark"></p>
<h3 id="选择左侧text"><a href="#选择左侧text" class="headerlink" title="选择左侧text"></a>选择左侧text</h3><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/fc9L6f9L5i.png?imageslim" alt="mark"></p>
<h3 id="为中文选择UTF编码"><a href="#为中文选择UTF编码" class="headerlink" title="为中文选择UTF编码"></a>为中文选择UTF编码</h3><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/619h01el4i.png?imageslim" alt="mark"></p>
<h3 id="重启git-bash"><a href="#重启git-bash" class="headerlink" title="重启git bash"></a>重启<code>git bash</code></h3><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171109/DdmHbLhH7E.png?imageslim" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git bash </tag>
            
            <tag> 中文乱码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用七牛图床为博客存储图片]]></title>
      <url>/2017/11/08/%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>图床一般是指储存图片的服务器，同时允许您把图片通过链接插入到其他网站<br><a id="more"></a><br>国内有很多不错的图床。比如腾讯云，网易蜂巢，七牛云<br>试用了七牛，感觉还是很不错的，有10GB免费存储，每个月10G流量，用做博客图片等资源存储，非常的适合  </p>
<h4 id="注册七牛云"><a href="#注册七牛云" class="headerlink" title="注册七牛云"></a>注册七牛云</h4><h5 id="首先需要注册七牛云账号"><a href="#首先需要注册七牛云账号" class="headerlink" title="首先需要注册七牛云账号"></a>首先需要<a href="https://portal.qiniu.com/signup?code=3ldl7o056iqtu" target="_blank" rel="external">注册七牛云账号</a></h5><h5 id="创建存储空间"><a href="#创建存储空间" class="headerlink" title="创建存储空间"></a>创建存储空间</h5><p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/3ff93mbJGl.png?imageslim" alt="mark"></p>
<p>存储空间名称作为唯一的 Bucket 识别符<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/2D1fef6gBk.png?imageslim" alt="mark"></p>
<h5 id="测试域名"><a href="#测试域名" class="headerlink" title="测试域名"></a>测试域名</h5><p>每个存储空间系统都会默认分配一个测试域名，以后上传的图片会挂载在这个域名下面，有条件的最好自己配置一个域名（测试域名限流量限速），此处不做讲解，自行百度<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/jadm23gk7A.png?imageslim" alt="mark"></p>
<h4 id="使用Mpic-图床神器"><a href="#使用Mpic-图床神器" class="headerlink" title="使用Mpic 图床神器"></a>使用Mpic 图床神器</h4><p>MPic是一款针对七牛云存储智能上传图片的图床工具，图片上传,无水印,不压缩图片质量,外链无限制,国内空间绝不会被墙，支持粘贴上传、拖放上传，一键复制 markdown 链接的图床，简单好用，无需注册。  </p>
<h5 id="下载图床神器"><a href="#下载图床神器" class="headerlink" title="下载图床神器"></a>下载图床神器</h5><p><a href="http://oz1lum573.bkt.clouddn.com/MPic%202.2.1.3.rar" target="_blank" rel="external">图床神器</a></p>
<h5 id="配置账号信息"><a href="#配置账号信息" class="headerlink" title="配置账号信息"></a>配置账号信息</h5><p>点击设置账号<br><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/AjH1dAK5FJ.png?imageslim" alt="mark">  </p>
<p>配置账号信息，空间名为七牛账户创建的存储空间名，AccessKey和AecretKey到七牛个人设置，秘钥处获取，域名为创建存储空间时系统分配的测试域名（如果自己配置了域名，则填自己配置好的域名）</p>
<p><img src="http://oz1lum573.bkt.clouddn.com/c-jimmy/171108/8FGEJkbkHb.png?imageslim" alt="mark"></p>
<h4 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h4><p>在编辑博客后者其他文档的时候，把图片拖拽到图床神器，图床神器会自动上传并生成网络地址，博客中直接插入地址即可</p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 七牛 </tag>
            
            <tag> 图床 </tag>
            
            <tag> 图床神器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ssh公钥实现对远程仓库的无口令访问]]></title>
      <url>/2017/11/08/%E4%BD%BF%E7%94%A8ssh%E5%85%AC%E9%92%A5%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%97%A0%E5%8F%A3%E4%BB%A4%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<h4 id="使用ssh公钥实现对远程仓库的无口令访问"><a href="#使用ssh公钥实现对远程仓库的无口令访问" class="headerlink" title="使用ssh公钥实现对远程仓库的无口令访问"></a>使用ssh公钥实现对远程仓库的无口令访问</h4><a id="more"></a>
<blockquote>
<p>当一个主机对应多个远程仓库账户时，使用https协议 ( github、 码云、bitbucket等远程仓库都支持https协议和SSH协议 ) 进行仓库的克隆、上传时，每次都需要输入当前远程仓库账户的用户名和密码，这时候可以使用SSH协议实现对远程仓库的无口令访问，使用SSH协议需要主机生成ssh-keys文件，然后把这个ssh-keys配置到你的远程账户下方可使用</p>
</blockquote>
<ul>
<li><p>在 Git Base 中运行以下命令生成本机公钥与私钥（没有git base 的先百度下载安装“git for windows”）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure>
</li>
<li><p>找到刚才所生成的公钥（默认放在：<code>/c/Users/Administrator/.ssh/</code>文件夹下，其中<code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥，这里需要使用的是公钥）</p>
</li>
<li>用编辑器打开公钥<code>id_rsa.pub</code>，复制里面的内容</li>
<li>登录你的远程仓库账户（github、bitbucket、码云） -&gt; 设置（settings） -&gt; SSH公钥（SSH and GPG keys）-&gt; 添加公钥（New SSH key）</li>
<li>在公钥（key）处粘贴刚才复制好的代码，标题（Title）可以自定义，如“company/home….”</li>
<li>点击确定（Add SSH key）后。需要再次验证当前账户的密码<blockquote>
<p>注意：使用远程仓库的时候，需要使用SSH协议地址; 生成的一个公钥，可以放在多个远程账户上使用；同时一般远程仓库都可以存放多个公钥</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 公钥 </tag>
            
            <tag> 无口令访问 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue环境搭建]]></title>
      <url>/2017/11/07/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ul>
<li><h4 id="github上建立一个仓库"><a href="#github上建立一个仓库" class="headerlink" title="github上建立一个仓库"></a>github上建立一个仓库</h4><ul>
<li>登录github (923415929@qq.com <strong>*</strong>)</li>
<li>新建一个仓库</li>
<li>本地项目文件夹下运行以下命令  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git status</div><div class="line">git add .</div><div class="line">git commit -m &quot;第一次提交&quot;</div><div class="line">// 第一次需要绑定github地址</div><div class="line">git remote add origin https://github.com/cjw923415929/VueDemo1.git</div><div class="line">git push origin master</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><ul>
<li><h5 id="安装nodejs环境-nodejs-org下载安装"><a href="#安装nodejs环境-nodejs-org下载安装" class="headerlink" title="安装nodejs环境(nodejs.org下载安装)"></a>安装nodejs环境(nodejs.org下载安装)</h5></li>
<li><h5 id="安装git客户端（git-for-windows，下载并安装）"><a href="#安装git客户端（git-for-windows，下载并安装）" class="headerlink" title="安装git客户端（git-for-windows，下载并安装）"></a>安装git客户端（git-for-windows，下载并安装）</h5></li>
<li><h5 id="安装cnpm环境"><a href="#安装cnpm环境" class="headerlink" title="安装cnpm环境"></a>安装cnpm环境</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 安装好&quot;git for window&quot;后，在任何文件夹下右击空白处，打开&quot;git bash&quot;</div><div class="line"></div><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<h6 id="注意：-git-bash-相当于一个美化后的命令行窗口"><a href="#注意：-git-bash-相当于一个美化后的命令行窗口" class="headerlink" title=" 注意： git bash 相当于一个美化后的命令行窗口 "></a><strong> 注意： git bash 相当于一个美化后的命令行窗口 </strong></h6></li>
<li><h5 id="安装bower环境"><a href="#安装bower环境" class="headerlink" title="安装bower环境"></a>安装bower环境</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install bower -g</div></pre></td></tr></table></figure>
<h6 id="注意：-bower不是必须安装的包，bower用来查看其它包的版本非常的方便，安装后执行-bower-info-vue-即可。其中vue可替换成任意的包"><a href="#注意：-bower不是必须安装的包，bower用来查看其它包的版本非常的方便，安装后执行-bower-info-vue-即可。其中vue可替换成任意的包" class="headerlink" title=" 注意： bower不是必须安装的包，bower用来查看其它包的版本非常的方便，安装后执行 bower info vue 即可。其中vue可替换成任意的包"></a><strong> 注意： bower不是必须安装的包，bower用来查看其它包的版本非常的方便，安装后执行 bower info vue 即可。其中vue可替换成任意的包</strong></h6></li>
<li><h5 id="安装vue-cli脚手架环境"><a href="#安装vue-cli脚手架环境" class="headerlink" title="安装vue-cli脚手架环境"></a>安装vue-cli脚手架环境</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// i = install, g = global </div><div class="line">cnpm i vue-cli -g</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><h4 id="使用vue-cli脚手架构建一个项目"><a href="#使用vue-cli脚手架构建一个项目" class="headerlink" title="使用vue-cli脚手架构建一个项目"></a>使用vue-cli脚手架构建一个项目</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 安装webpack-simple 类型的项目结构</div><div class="line">vue init webpack-simple vue-demo1</div><div class="line">// 进入vue-demo1模块</div><div class="line">cd vue-demo1</div><div class="line">// 安装项目依赖</div><div class="line">cnpm install</div><div class="line">// 运行项目</div><div class="line">npm run dev</div></pre></td></tr></table></figure>
<h6 id="注意：国内建议使用cnpm安装依赖，如果总是安装失败，请检查磁盘类型是不是fat32的，如果是，请转为ntfs类型再执行安装依赖操作。转换方式，命令行输入-convert-fs-ntfs-，其中-代表需要转换的磁盘-；"><a href="#注意：国内建议使用cnpm安装依赖，如果总是安装失败，请检查磁盘类型是不是fat32的，如果是，请转为ntfs类型再执行安装依赖操作。转换方式，命令行输入-convert-fs-ntfs-，其中-代表需要转换的磁盘-；" class="headerlink" title=" 注意：国内建议使用cnpm安装依赖，如果总是安装失败，请检查磁盘类型是不是fat32的，如果是，请转为ntfs类型再执行安装依赖操作。转换方式，命令行输入 convert *:/fs:ntfs ，其中* 代表需要转换的磁盘 ；"></a><strong> 注意：国内建议使用cnpm安装依赖，如果总是安装失败，请检查磁盘类型是不是fat32的，如果是，请转为ntfs类型再执行安装依赖操作。转换方式，命令行输入 convert *:/fs:ntfs ，其中* 代表需要转换的磁盘 </strong>；</h6></li>
<li><h4 id="安装常用模块"><a href="#安装常用模块" class="headerlink" title="安装常用模块"></a>安装常用模块</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 安装vuex, 以--save方式安装</div><div class="line">cnpm i vuex -S</div><div class="line">// 安装style-loader, 以--save-dev方式安装</div><div class="line">cnpm i style -D</div></pre></td></tr></table></figure>
</li>
<li><h4 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.css$/,</div><div class="line">    loader: &apos;style-loader!css-loader&apos;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[gallery]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[links]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
